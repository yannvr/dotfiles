" =============================================================================
" Modern Vim/Neovim Base Configuration (2025)
" =============================================================================
" Completely modernized with vim/nvim compatibility and current best practices

" =============================================================================
" Core Settings (Both Vim and Neovim)
" =============================================================================

" Enable syntax highlighting and file type detection
if !exists('g:syntax_on')
    syntax enable
endif
filetype plugin indent on

" Basic editor behavior
set encoding=utf-8              " Use UTF-8 encoding
set mouse=a                     " Enable mouse in all modes
set mousehide                   " Hide mouse when typing
set hidden                      " Allow switching buffers without saving
set confirm                     " Confirm before closing unsaved files
set autoread                    " Auto-reload files changed outside vim
set updatetime=300              " Faster completion and better experience
set timeoutlen=500              " Faster key sequence completion

" History and undo
set history=10000               " Increase command history
if has('persistent_undo')
    set undofile                " Enable persistent undo
    set undolevels=10000        " Maximum number of undos
    set undoreload=100000       " Maximum lines to save for undo on buffer reload
    " Create undo directory if it doesn't exist
    if !isdirectory($HOME . '/.vim/undo')
        call mkdir($HOME . '/.vim/undo', 'p', 0700)
    endif
    set undodir=~/.vim/undo//
endif

" Backup and swap files
set backup
set writebackup
" Create directories if they don't exist
if !isdirectory($HOME . '/.vim/backup')
    call mkdir($HOME . '/.vim/backup', 'p', 0700)
endif
if !isdirectory($HOME . '/.vim/swap')
    call mkdir($HOME . '/.vim/swap', 'p', 0700)
endif
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//

" =============================================================================
" Display and UI
" =============================================================================

set number                      " Show line numbers
if exists('+relativenumber')
    set relativenumber          " Show relative line numbers (vim 7.4+)
endif
set ruler                       " Show cursor position
set showcmd                     " Show command in status line
set showmode                    " Show current mode
set laststatus=2                " Always show status line
if &lines > 4
    set showtabline=2           " Always show tab line (if enough room)
else
    set showtabline=1           " Show tab line only when needed
endif
set signcolumn=yes              " Always show sign column (prevents jumping)

" Modern display settings
if has('termguicolors') && $COLORTERM =~# 'truecolor\|24bit'
    set termguicolors           " Enable true color support
endif

" Line display
set wrap                        " Wrap long lines
set linebreak                   " Break lines at word boundaries
set breakindent                 " Indent wrapped lines
if exists('+breakindentopt')
    set breakindentopt=shift:2  " Extra indent for wrapped lines
endif

" Cursor and visual aids
set cursorline                  " Highlight current line
set showmatch                   " Highlight matching brackets
set matchtime=2                 " Reduce match highlight time

" =============================================================================
" Search and Navigation
" =============================================================================

set incsearch                   " Incremental search
set hlsearch                    " Highlight search results
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive if uppercase used

" Enhanced navigation
set scrolloff=8                 " Keep 8 lines above/below cursor
set sidescrolloff=8             " Keep 8 columns left/right of cursor
set virtualedit=block           " Allow cursor beyond EOL in visual block mode

" =============================================================================
" Indentation and Formatting
" =============================================================================

set expandtab                   " Use spaces instead of tabs
set tabstop=4                   " Tab width
set softtabstop=4               " Soft tab width
set shiftwidth=4                " Indent width
set smartindent                 " Smart indentation
set autoindent                  " Auto indentation

" Modern whitespace handling
set list                        " Show invisible characters
if has('multi_byte')
    set listchars=tab:→\ ,trail:·,extends:»,precedes:«,nbsp:⎵
else
    set listchars=tab:>\ ,trail:.,extends:>,precedes:<,nbsp:_
endif

" =============================================================================
" Completion and Wildmenu
" =============================================================================

set wildmenu                    " Enhanced command completion
set wildmode=longest:full,full  " Complete longest, then show all
set wildignorecase              " Case insensitive completion

" Ignore common files
set wildignore+=*.o,*.obj,*.exe,*.dll,*.so,*.dylib
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
set wildignore+=*/node_modules/*,*/vendor/*,*/.next/*,*/dist/*,*/build/*
set wildignore+=*.pyc,*.pyo,*/__pycache__/*
set wildignore+=*.jpg,*.png,*.gif,*.svg,*.ico,*.pdf

" =============================================================================
" Window and Buffer Management
" =============================================================================

set splitbelow                  " Open horizontal splits below
set splitright                 " Open vertical splits to the right
set winminheight=0              " Allow zero-height windows
set equalalways                 " Resize splits when adding/removing windows

" Buffer navigation improvements
set switchbuf=useopen,usetab    " Use existing window/tab for buffers

" =============================================================================
" Key Mappings
" =============================================================================

" Better window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Toggle search highlighting
nnoremap <silent> <Leader>/ :nohlsearch<CR>

" Quick buffer navigation
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

" Quick tab navigation
nnoremap <silent> [t :tabprevious<CR>
nnoremap <silent> ]t :tabnext<CR>
nnoremap <silent> [T :tabfirst<CR>
nnoremap <silent> ]T :tablast<CR>

" Visual mode enhancements
vnoremap < <gv                  " Maintain selection when indenting
vnoremap > >gv                  " Maintain selection when indenting

" Command mode helpers
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>

" Emergency sudo write
if !has('nvim')
    cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!
endif

" =============================================================================
" Auto Commands
" =============================================================================

augroup ModernVimrc
    autocmd!

    " Restore cursor position
    autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
        \ |   execute "normal! g`\""
        \ | endif

    " Auto-create directories when saving files
    autocmd BufWritePre *
        \ if !isdirectory(expand('<afile>:p:h'))
        \ |   call mkdir(expand('<afile>:p:h'), 'p')
        \ | endif

    " Auto-resize splits when vim is resized
    autocmd VimResized * wincmd =

    " Set appropriate file types
    autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact
    autocmd BufNewFile,BufRead *.json set filetype=json
    autocmd BufNewFile,BufRead *.md set filetype=markdown

augroup END

" =============================================================================
" Functions
" =============================================================================

" Toggle background between light and dark
function! ToggleBG() abort
    if &background ==# 'dark'
        set background=light
    else
        set background=dark
    endif
endfunction
nnoremap <silent> <Leader>bg :call ToggleBG()<CR>

" Strip trailing whitespace
function! StripTrailingWhitespace() abort
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfunction
command! StripWhitespace call StripTrailingWhitespace()

" Quick grep function
if executable('rg')
    set grepprg=rg\ --vimgrep\ --smart-case\ --follow
    set grepformat=%f:%l:%c:%m
elseif executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif

" =============================================================================
" Vim vs Neovim Specific Settings
" =============================================================================

if has('nvim')
    " Neovim specific settings
    set inccommand=split            " Live substitution preview

    " Better terminal integration
    if exists(':tnoremap')
        tnoremap <Esc> <C-\><C-n>
        tnoremap <C-h> <C-\><C-n><C-w>h
        tnoremap <C-j> <C-\><C-n><C-w>j
        tnoremap <C-k> <C-\><C-n><C-w>k
        tnoremap <C-l> <C-\><C-n><C-w>l
    endif

    " Modern clipboard
    set clipboard=unnamedplus

else
    " Vim specific settings
    set ttyfast                     " Fast terminal connection
    set lazyredraw                  " Don't redraw during macros

    " Improve escape time
    set ttimeout
    set ttimeoutlen=50

    " Better backspace behavior
    set backspace=indent,eol,start

    " Clipboard for different systems
    if has('clipboard')
        if has('unnamedplus')
            set clipboard=unnamed,unnamedplus
        else
            set clipboard=unnamed
        endif
    endif

    " Enable 256 colors if available
    if &term =~# '256color'
        set t_Co=256
    endif
endif

" =============================================================================
" Plugin Compatibility
" =============================================================================

" Git integration (if fugitive is available)
if exists(':Git')
    nnoremap <silent> <Leader>gs :Git<CR>
    nnoremap <silent> <Leader>gd :Git diff<CR>
    nnoremap <silent> <Leader>gc :Git commit<CR>
    nnoremap <silent> <Leader>gp :Git push<CR>
    nnoremap <silent> <Leader>gl :Git log --oneline<CR>
endif

" FZF integration (if available)
if exists(':FZF')
    nnoremap <silent> <C-p> :FZF<CR>
    nnoremap <silent> <Leader>b :Buffers<CR>
    nnoremap <silent> <Leader>h :History<CR>
endif

" =============================================================================
" Performance Optimizations
" =============================================================================

" Improve scrolling performance
set ttyfast
set lazyredraw

" Reduce regex engine backtracking
if exists('+regexpengine')
    set regexpengine=1
endif

" Optimize for large files
set synmaxcol=200               " Don't highlight long lines

" =============================================================================
" Security
" =============================================================================

set nomodeline                  " Disable modelines for security

" =============================================================================
" Legacy Compatibility
" =============================================================================

" Ensure compatibility with older vim versions
if v:version < 800
    set nocompatible

    " Fallback settings for older vim
    if !exists('+relativenumber')
        set number
    endif

    if !has('patch-7.4.354')
        set ttymouse=xterm2
    endif
endif

