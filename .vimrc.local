map Q :q!<CR>
imap jj <Esc>

au BufRead,BufNewFile .vimrc* setfiletype vim
au BufNew,BufRead *.ts setlocal omnifunc=javascriptcomplete#CompleteJS

set shell=zsh

nnoremap <Leader>u :MundoToggle<CR>
filetype plugin on
au BufRead,BufNewFile *.ts        setlocal filetype=typescript

" Toggle sticking mode for NerdTree
nnoremap <Leader>n :let NERDTreeQuitOnOpen = 1<bar>NERDTreeToggle<CR>
nnoremap <Leader>N :let NERDTreeQuitOnOpen = 0<bar>NERDTreeToggle<CR>
nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

let NERDTreeQuitOnOpen = 0
" Keep tree in sync


" Tags {{{2
" NeoBundle 'xolox/vim-easytags'
" let g:easytags_file = '~/.vim/tags'
let g:easytags_async = 1
" let g:easytags_dynamic_files = 2
" let g:easytags_by_filetype = 1
" let g:easytags_include_members = 1

let g:easytags_languages = {
\  'javascript': {
\    'cmd': 'jsctags'
\  },
\   'typescript': {
\    'cmd': 'jsctags'
\ }
\}

" 
" let g:easytags_languages = {
" \   'language': {
" \     'cmd': g:easytags_cmd,
" \       'args': [],
" \       'fileoutput_opt': '-f',
" \       'stdout_opt': '-f-',
" \       'recurse_flag': '-R'
" \   }
" \}

if has('nvim')
    autocmd! BufWritePost,BufEnter * Neomake
    :tnoremap <Esc> <C-\><C-n>
    nnoremap <leader>o :below 10sp term://$SHELL<cr>i

     " Neomake
     let g:neomake_javascript_jscs_maker = {
         \ 'exe': 'jscs',
         \ 'args': ['--no-color', '--preset', 'airbnb', '--reporter', 'inline', '--esnext'],
         \ 'errorformat': '%f: line %l\, col %c\, %m',
         \ }
         let g:neomake_javascript_enabled_makers = ['jscs']
endif

" TODO: Fix those horrible conflicts
unmap H
unmap L

nnoremap <Leader>W :w<CR>
nnoremap <Leader>A :set autowrite<CR>
" Unite
nnoremap <C-P>    :Unite -buffer-name=files -start-insert file_rec/async:!<cr>
nnoremap <space>/ :Unite -no-empty -no-resize grep<cr>
nnoremap <space>s :Unite -quick-match buffer<cr>

" Tab nav
nnoremap † :tabnew<CR><C-W>w<CR>
nnoremap “ :tabprevious<CR> # <M-[>
nnoremap ‘ :tabnext<CR> # <M-[>
nnoremap ˙ :tabprevious<CR> # <M-[>
nnoremap ¬ :tabnext<CR> # <M-l>

" VIM ONLY: Mapping C-[ fucks up the term royally in vim
" nnoremap <Leader>[ :tabprevious<CR>

" Quickly edit map keys
nnoremap <Leader>a <C-W><C-V>:e ~/.zshrc.alias<CR>
nnoremap <C-E> :NERDTreeToggle %<CR>

" nnoremap <Leader>T :TagbarToggle<CR>
nnoremap <Leader>r :registers<CR>
nnoremap <Leader>b :e ~/.vimrc.bundles.local<CR>
nnoremap <Leader>v :e ~/.vimrc.local<CR>
nnoremap <Leader>z :e ~/.zshrc.local<CR>
nnoremap <Leader>Z :e ~/.zshrc<CR>


" Buffer navigation
set wildchar=<Tab> wildmenu wildmode=full
set wildcharm=<C-Z>
nnoremap ∫ :b <C-Z>

nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

" Search for visually selected text
vnoremap // y/<C-R>"<CR>
nnoremap <C-D> :t.<CR>
nnoremap <C-D> :t.<CR>

colorscheme solarized

"Search for visually selected text
vnoremap // y/<C-R>"<CR>
vnoremap ,. :cd %:p:h<CR>

"let g:UltiSnipsSnippetDirectories=["UltiSnips", "mysnippets"]
"let mapleader = ","


if !exists("g:ycm_semantic_triggers")
   let g:ycm_semantic_triggers = {}
   endif
   let g:ycm_semantic_triggers['typescript'] = ['.']
   set completeopt-=preview
