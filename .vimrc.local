map Q :q!<CR>
imap jj <Esc>

au BufRead,BufNewFile .vimrc* setfiletype vim
au BufNew,BufRead *.ts setlocal omnifunc=javascriptcomplete#CompleteJS

let g:ctrlp_map = '<c-/>'
let g:ctrlp_cmd = 'Ctrl/'

let g:multi_cursor_use_default_mapping=0

let g:indent_guides_enable_on_vim_startup = 0


let g:EasyClipAutoFormat=0

" multiple cursors to remap
"let g:multi_cursor_next_key='<C-n>'
"let g:multi_cursor_prev_key='<C-p>'
"let g:multi_cursor_skip_key='<C-x>'
"let g:multi_cursor_quit_key='<Esc>'
"" Map start key separately from next key
let g:multi_cursor_start_key='<F6>'

set autochdir
"autocmd BufEnter * silent! lcd %:p:h
set shell=zsh

nnoremap <Leader>u :MundoToggle<CR>
filetype plugin on
au BufRead,BufNewFile *.ts        setlocal filetype=typescript

" Toggle sticking mode for NerdTree
nnoremap <Leader>n :let NERDTreeQuitOnOpen = 1<bar>NERDTreeToggle<CR>
nnoremap <Leader>N :let NERDTreeQuitOnOpen = 0<bar>NERDTreeToggle<CR>
nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

let NERDTreeQuitOnOpen = 0
" Keep tree in sync


" Tags {{{2
" NeoBundle 'xolox/vim-easytags'
" let g:easytags_file = '~/.vim/tags'
let g:easytags_async = 1
" let g:easytags_dynamic_files = 2
" let g:easytags_by_filetype = 1
" let g:easytags_include_members = 1

let g:easytags_languages = {
\  'javascript': {
\    'cmd': 'jsctags'
\  },
\   'typescript': {
\    'cmd': 'jsctags'
\ }
\}


if has('nvim')
    autocmd! BufWritePost,BufEnter * Neomake
    :tnoremap <Esc> <C-\><C-n>
    nnoremap <leader>o :below 10sp term://$SHELL<cr>i
     " Neomake
     let g:neomake_javascript_jscs_maker = {
         \ 'exe': 'jscs',
         \ 'args': ['--no-color', '--preset', 'airbnb', '--reporter', 'inline', '--esnext'],
         \ 'errorformat': '%f: line %l\, col %c\, %m',
         \ }
         let g:neomake_javascript_enabled_makers = ['jscs']
endif

" TODO: Fix those horrible conflicts
unmap H
unmap L
unmap <C-e>

nmap             <leader>sc :SessionClose<CR>:q<CR>


nnoremap ; :w<CR>
nnoremap <Leader>A :set autowrite<CR>
let g:deoplete#enable_at_startup = 1
nnoremap ÷ :call NERDComment(0,"toggle")<CR>
let $FZF_DEFAULT_COMMAND = 'ag -g ""'




autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
inoremap <expr><C-l>     neocomplete#complete_common_string()
inoremap <expr><Tab>
			\ neocomplete#complete_common_string() != '' ?
			\   neocomplete#complete_common_string() :
			\ pumvisible() ? "\<C-n>" : "\<Tab>"
<
" Unite
let g:unite_enable_start_insert = 1

call unite#custom#source('file_rec/async', 'ignore_pattern', 'node_modules\/|build\/|\.idea|\.git')
call unite#custom#source('file_rec', 'soters', 'sorter_length')

nnoremap Ø :<C-u>UniteWithProjectDir -start-insert file_rec/async:!<CR>
nnoremap Ø :<C-u>UniteWithProjectDir -start-insert file_rec/async:!<CR>
nnoremap ƒ :FZF<CR>

"nnoremap Ø :<C-u>UniteWithProjectDir -start-insert file_rec/async:!<CR>
"
nnoremap Ï :<C-u>UniteWithProjectDir grep -start-insert<cr>


nnoremap π    :Unite -buffer-name=files -start-insert file_rec/async:!<cr>
nnoremap <space>/ :Unite -no-empty -no-resize grep<cr>
nnoremap <space>s :Unite -quick-match buffer<cr>


" Tab nav
nnoremap † :tabnew<CR><C-W>w<CR>
"# <M-[>
nnoremap “ :tabprevious<CR>
"# <M-[>
nnoremap ‘ :tabnext<CR>

" VIM ONLY: Mapping C-[ fucks up the term royally in vim
" nnoremap <Leader>[ :tabprevious<CR>

" Quickly edit map keys
nnoremap <Leader>A <C-W><C-V>:e ~/.zshrc.alias<CR>
nnoremap <Leader>a :Ack
nnoremap <Leader>T :TagbarToggle<CR>
nnoremap <Leader>r :registers<CR>
nnoremap <Leader>B :e ~/.vimrc.bundles.local<CR>
nnoremap <Leader>v :e ~/.vimrc.local<CR>
nnoremap <Leader>V :e ~/.vimrc<CR>
nnoremap <Leader>z :e ~/.zshrc.local<CR>
nnoremap <Leader>E :e ~/.zshrc-e<CR>
nnoremap <Leader>Z :e ~/.zshrc<CR>
nnoremap <Leader>b :BufExplorerVerticalSplit <CR>

nnoremap ∫ :BufExplorerVerticalSplit <CR>

" Custom Buffer navigation (no popup for buffer selection)
set wildchar=<Tab> wildmenu wildmode=full
set wildcharm=<C-Z>
set ignorecase

nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>

" Search for visually selected text
vnoremap // y/<C-R>"<CR>
"<C-D>
nnoremap ∂ :t.<CR>

if exists("neovim_dot_app")
    "Sadly solarized doesn't work in Neovim.app despite accepted fixes (https://github.com/neovim/neovim/issues/2953)
    colorscheme molokai_dark
else
    colorscheme solarized
endif

"Search for visually selected text
vnoremap // y/<C-R>"<CR>
vnoremap ,. :cd %:p:h<CR>

"let g:UltiSnipsSnippetDirectories=["UltiSnips", "mysnippets"]
"let mapleader = ","


if !exists("g:ycm_semantic_triggers")
   let g:ycm_semantic_triggers = {}
   endif
   let g:ycm_semantic_triggers['typescript'] = ['.']
   set completeopt-=preview
